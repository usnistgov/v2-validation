# reference.conf

report {

  # Detections classifications
  classification {
    error         = "Error"
    warning       = "Warning"
    alert         = "Alert"
    informational = "Informational"
    affirmative   = "Affirmative"
  }

  # Detection categories
  category {
    usage       = "Usage"
    o-usage = "O-Usage"
    cardinality = "Cardinality"
    length      = "Length"
    length-spec-error = "Length Spec Error"
    format      = "Format"
    extra       = "Extra"
    unexpected  = "Unexpected"
    invalid     = "Invalid Content"
    unescaped   = "Unescaped Separator"
	unresolved-field = "Unresolved Field Model"

    constraint-failure    = "Constraint Failure"
    coconstraint-failure    = "CoConstraint Failure"
    content-failure    = "Content Failure"
    constraint-success    = "Constraint Success"
    coconstraint-success    = "CoConstraint Success"
    content-success    = "Content Success"
    constraint-spec-error = "Constraint Spec Error"
    content-spec-error = "Content Spec Error"

    predicate-failure    = "Predicate Failure"
    predicate-success    = "Predicate Success"
    predicate-spec-error = "Predicate Spec Error"


	ubs				    = "Undetermined Binding Strength"
    evs                 = "EVS"
    pvs                 = "PVS"
    code-not-found      = "Code Not Found"
    code-not-found-open = "Code Not Found (Open ValueSet)"

    vs-not-found     = "VS Not Found"
    empty-vs         = "Empty VS"
    vs-error         = "VS Error"
    vs-no-validation = "Excluded From Validation"
    coded-element    = "Coded Element"
    binding-location = "Binding Location"
  }

  ################################################################################
  ###             Structure based detections                                   ###
  ################################################################################

  ################################################################################
  # Usage detections
  #
  #    There are four types of detections:
  #       * RUsage: Raised when an element with R usage is not populated
  #       * XUsage:  Raised when an element with X  usage is populated
  #       * WUsage:  Raised when an element with W  usage is populated
  #       * REUsage: Raised when an element with RE usage is populated
  #
  #    The template takes one parameter:
  #        the location formatted as:  ElementType ElementPath (ElementDescription)
  ################################################################################

  length-spec-error-no-valid {
    template = "No valid length specification was found for element %s"
    category = ${report.category.length-spec-error}
    classification = ${report.classification.alert}
  }

  length-spec-error-xor {
    template = "Length specification error for element %s. One of (MaxLength, MinLength) or ConfLength should be present, but not both"
    category = ${report.category.length-spec-error}
    classification = ${report.classification.alert}
  }

  r-usage {
    template = "The required %s is missing"
    category = ${report.category.usage}
    classification = ${report.classification.error}
  }

  x-usage {
    template = "The %s is present whereas it is an unsupported element (Usage = X)"
    category = ${report.category.usage}
    classification = ${report.classification.error}
  }

  w-usage {
    template = "The %s is present whereas it is a withdrawn element (Usage = W)"
    category = ${report.category.usage}
    classification = ${report.classification.error}
  }

  re-usage {
    template = "%s is missing. Depending on the use case and data availability it may be appropriate to value this element (Usage is "RE", Required, but may be Empty)."
    category = ${report.category.usage}
    classification = ${report.classification.affirmative}
  }

  o-usage {
    template = "Optional element %s was populated with the value %s. Depending on the local implementation this element is excluded from the validation"
    category = ${report.category.o-usage}
    classification = ${report.classification.alert}
  }

  ################################################################################
  # Cardinality detection
  #
  #   The cardinality detection is issued when the number of repetitions of an
  #   element is not in the specified cardinality range.
  #
  #   The template takes four parameters:
  #     $1 is the location formatted as: ElementType ElementPath (Element Description)
  #     $2 is the minimum cardinality
  #     $3 is the maximum cardinality
  #     $4 is the number of repetitions found
  ################################################################################

  cardinality {
    template = "%s must be in the cardinality range of [%s, %s]; %s occurrences found"
    category = ${report.category.cardinality}
    classification = ${report.classification.error}
  }

  ################################################################################
  # null cardinality detection
  #
  #   The null cardinality detection is issued when a null field has more than one instance.
  ################################################################################

  null-cardinality {
    template = "%s has a null value and more than one occurrence; %s occurrences found"
    category = ${report.category.cardinality}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Length detection
  #
  #    The length detection is issued when the length of a primitive element
  #    is not in the specified length range.
  #
  #    The template takes four parameters:
  #      $1 is the location formatted as: ElementType ElementPath (Element Description)
  #      $2 is the minimum length
  #      $3 is the maximum length
  #      $4 the value of the element
  ################################################################################

  length {
    template = "The length of %s must be within the range [%s, %s]. Value = '%s'"
    category = ${report.category.length}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Format detection
  #
  #    The format detection is issued when the value of a primitive element
  #    is not valid according to the format defined or derived from the data type.
  #
  #    The template takes one parameters: The error message
  ################################################################################

  format {
    template = "%s"
    category = ${report.category.format}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Extra children detection
  #
  #    This detection is issued when a complex element has extra children
  #
  #    The template takes one parameter:
  #       the location formatted as: ElementType ElementPath (Element Description)
  ################################################################################

  extra {
    template = "%s has extra children"
    category = ${report.category.extra}
    classification = ${report.classification.warning}
  }

  ################################################################################
  # Unescaped Sep detection
  #
  #    This detection is issued when a primitive element contains unescaped separators
  #
  #    The template takes one parameter:
  #       the location formatted as: ElementType ElementPath (Element Description)
  ################################################################################

  unescaped {
    template = "The primitive %s contains at least one unescaped delimiter"
    category = ${report.category.unescaped}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Unexpected Segment detection
  #
  #    This detection is issued when an unexpected segment is found at a specific position
  #
  #    The template takes one parameter: the content representing the segment
  ################################################################################

  unexpected {
    template = "Segment %s is not expected at this location"
    category = ${report.category.unexpected}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Invalid Segment definition detection
  #
  #    This detection is issued when an invalid content is found in the message
  #
  #    The template takes one parameter: the content representing the segment
  ################################################################################

  invalid {
    template = "'%s' is not a valid segment definition"
    category = ${report.category.invalid}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Unresolved dynamic mapping definition detection
  #
  #    This detection is issued when a the reference values are not found in dynamic mapping
  #	   for varies fields
  #
  #    The template takes 3 parameters : 1- First reference value, 2- Second reference value, 3- Element
  ################################################################################

  unresolved-field {
  	template = "The values ('%s','%s') were not found in Dynamic Mapping for %s"
    category = ${report.category.unresolved-field}
    classification = ${report.classification.error}
  }

  ################################################################################
  ###             Content based detections                                     ###
  ################################################################################

  ################################################################################
  # This detection is issued for a failed constraint verification
  #
  #    The template takes two parameter:
  #       $1 The id of the constraint
  #       $2 The description of the constraint
  ################################################################################

  coconstraint-failure {
    template = "If %s then %s %s"
    category = ${report.category.coconstraint-failure}
    classification = ${report.classification.error}
  }

  coconstraint-success {
    template = "If %s then %s"
    category = ${report.category.coconstraint-success}
    classification = ${report.classification.affirmative}
  }

  highlevel-content {
    	category = "High-level Content Error"
    	classification = ${report.classification.error}
  }

  constraint-failure {
    template = "%s - %s"
    category = ${report.category.constraint-failure}
    classification = ${report.classification.error}
  }

  constraint-success {
    template = "%s - %s"
    category = ${report.category.constraint-success}
    classification = ${report.classification.affirmative}
  }

  constraint-spec-error {
    template = "%s - %s"
    category = ${report.category.constraint-spec-error}
    classification = ${report.classification.affirmative}
  }

  content-failure {
    template = "%s - %s"
    category = ${report.category.content-failure}
    classification = ${report.classification.error}
  }

  content-success {
    template = "%s - %s"
    category = ${report.category.content-success}
    classification = ${report.classification.affirmative}
  }

  content-spec-error {
    template = "%s - %s"
    category = ${report.category.content-spec-error}
    classification = ${report.classification.affirmative}
  }

  ################################################################################
  # This detection is issued for a successful predicate verification
  #
  #    The template takes one parameter: the predicate as string
  ################################################################################
  predicate-success {
    template = "%s"
    category = ${report.category.predicate-success}
    classification = ${report.classification.affirmative}
  }

  ################################################################################
  # This detection is issued for a failed predicate verification
  #
  #    The template takes three parameter:
  #       $1 The formatted string representing the usage error
  #       $2 The usage to be used based on the condition
  #       $3 The predicate description
  ################################################################################
  predicate-failure {
    template = "%s. The element is %s based on the condition predicate evaluation: %s"
    category = ${report.category.predicate-failure}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is issued for a problematic predicate verification
  #
  #    The template takes one parameter: the predicate as string
  ################################################################################
  predicate-spec-error {
    template = "%s"
    category = ${report.category.predicate-spec-error}
    classification = ${report.classification.affirmative}
  }

  ################################################################################
  ###             Value set based detections                                   ###
  ################################################################################

  ################################################################################
  # This detection is raised when the code is in the value set but the usage is E
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  evs {
    template = "The value '%s' at location %s is an excluded (E) code; Value Set: %s"
    category = ${report.category.evs}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the code is in the value set but the usage is P
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  pvs {
    template = "The value '%s' at location %s is a permitted (P) code; Value Set: %s"
    category = ${report.category.pvs}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the code cannot be found in the value set
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  code-not-found {
    template = "The value '%s' at location %s is not member of the value set %s"
    category = ${report.category.code-not-found}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the code cannot be found in an open value set
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  #       $4 The id of the value set
  ################################################################################
  code-not-found-open {
    template = "The value '%s' at location %s is not member of the value set %s. Note: In certain circumstances the ‘open’ value set %s may have been updated to include the code. However, the updated value set is unknown to the validation and thus this error detection can be nullified by manual inspection."
    category = ${report.category.code-not-found-open}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the value set cannot be found in the library
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  vs-not-found {
    template = "The value '%s' at location %s cannot be evaluated. The value set '%s' cannot be found."
    category = ${report.category.vs-not-found}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the value set is empty
  #
  #    The template takes one parameter: The id of the value set
  ################################################################################
  empty-vs {
    template = "The value set %s is empty"
    category = ${report.category.empty-vs}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when there is an error in the value set
  #
  #    The template takes one parameter: The error message
  ################################################################################
  vs-error {
    template = "%s"
    category = ${report.category.vs-error}
    classification = ${report.classification.affirmative}
  }

  ################################################################################
  # This detection is raised when there is an error while resolving the binding location
  #
  #    The template takes one parameter: The error message
  ################################################################################
  binding-location {
    template = "%s"
    category = ${report.category.binding-location}
    classification = ${report.classification.affirmative}
  }


  ################################################################################
  # This detection is raised when the value set is excluded from the validation
  #
  #    The template takes one parameter: The id of the value set
  ################################################################################
  vs-no-validation {
    template = "The value set %s has been excluded from the validation"
    category = ${report.category.vs-no-validation}
    classification = ${report.classification.affirmative}
  }

  ################################################################################
  # This detection is raised when coded element validation fails
  #
  #    The template takes one parameter: The error message describing the problem
  ################################################################################
  coded-element {
    template = "%s"
    category = ${report.category.coded-element}
    classification = ${report.classification.error}
  }
}

context-based {
  value-test-case-fixed = "Invalid content (based on test case fixed data). The value '%s' at '%s' does not match the expected value '%s'."
  value-test-case-fixed-list = "Invalid content (based on test case fixed data). The value '%s' at '%s' does not match one of the expected values '%s'."
 }
